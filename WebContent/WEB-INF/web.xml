<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>CRMS</display-name>
  <welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
    <welcome-file>/pages/admin.jsp</welcome-file>
  </welcome-file-list>
  
  <error-page>
	<error-code>404</error-code>
	<location>/pages/404.html</location>
	</error-page>
  
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  
  
    <!-- 通过CORS技术实现AJAX跨域访问 -->
   <filter>
       <filter-name>corsFilter</filter-name>
       <filter-class>com.iTeam.filter.CorsFilter</filter-class>
       <!-- 允许访问的客户端域名 -->
       <init-param>
           <param-name>allowOrigin</param-name>
           <param-value>*</param-value>
       </init-param>
       <!-- 允许访问的方法名 -->
       <init-param>
           <param-name>allowMethods</param-name>
           <param-value>GET,POST,PUT,DELETE,OPTIONS</param-value>
       </init-param>
       	<!--是否允许请求带有验证信息，若要获取客户端域下的cookie时，需要将其设置为true  -->
       <init-param>
           <param-name>allowCredentials</param-name>
           <param-value>true</param-value>
       </init-param>
       <init-param>
       <!-- 允许服务端访问的客户端请求头 -->
           <param-name>allowHeaders</param-name>
           <param-value>Content-Type,X-Token</param-value>
       </init-param>
   </filter>
   <filter-mapping>
       <filter-name>corsFilter</filter-name>
       <url-pattern>/*</url-pattern>
   </filter-mapping>
  
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  

	<!-- 字符编码过滤器 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <async-supported>true</async-supported>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--开启put，和delete的支持-->
<!--使用Rest风格的URI,将页面普通的post请求转为delete或者put请求
	HTTP定义了这四种方法，而HTML只支持两种:GET和POST，有两种可能的解决方案:
	1.您可以使用JavaScript执行PUT或DELETE操作，
	2.或者简单地使用实际方法作为附加参数(在HTML表单中建模为隐藏的输入字段)来完成POST。
	后一个技巧是Spring的HiddenHttpMethodFilter所做的。
	这个过滤器是一个普通的Servlet过滤器，因此它可以与任何web框架(不仅仅是Spring MVC)结合使用。
	只需将此过滤器添加到web。和带有隐藏_method参数的POST将被转换为相应的HTTP方法请求。
-->
  <filter>
	<filter-name>hiddenHttpMethodFilter</filter-name>
	<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
	<filter-name>hiddenHttpMethodFilter</filter-name>
	<url-pattern>/</url-pattern>
  </filter-mapping>


  <!-- <filter>
  	<display-name>LoginFilter</display-name>
  	<filter-name>LoginFilter</filter-name>
  	<filter-class>com.iTeam.filter.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>LoginFilter</filter-name>
  	<url-pattern>/pages/*</url-pattern>
  </filter-mapping> -->
  
    <servlet>
    <servlet-name>springMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <!-- 支持异步处理 -->
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>springMVC</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
</web-app>